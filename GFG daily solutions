Largest Subarray with sum 0 :-


//{ Driver Code Starts
//Initial Template for C++

#include <bits/stdc++.h>
using namespace std;


// } Driver Code Ends
/*You are required to complete this function*/

class Solution{
    public:
    int maxLen(vector<int>&A, int n)
    {   
        // Your code here
        unordered_map<int,int> m;
        int sum=0;
        int len=0;
        for(int i=0;i<n;i++)
        {
            sum += A[i];
            if(A[i]==0 && len==0)
            {
                len=1;
            }
            if(sum==0)
            {
                len=i+1;
            }
            if(m.find(sum) != m.end())
            {
                len=max(len,i-m[sum]);
            }
            else
            {
                m[sum]=i;
            }
        }
        
        return len;
        
    }
};


Equilibrium Point :-

//{ Driver Code Starts
#include <iostream>
using namespace std;


// } Driver Code Ends
class Solution{
    public:
    // Function to find equilibrium point in the array.
    // a: input array
    // n: size of array
    int equilibriumPoint(long long arr[], int n) {
    
        // Your code here
        int sum=0;
        int leftsum=0;
        for(int i=0;i<n;i++)
        {
            sum+=arr[i];
        }
        for(int i=0;i<n;i++)
        {
            sum-=arr[i];
            if(leftsum==sum)
            return i+1;
            leftsum+=arr[i];
        }
        return -1;
    }

};


Bitwise Operator :-
void bitWiseOperation(int a, int b, int c) {

    // Your code here
    int d=a^a;
    int e=c^b;
    int f=a&b;
    int g=c|(a^a);
    int h=~e;
    cout<<d<<endl;
    cout<<e<<endl;
    cout<<f<<endl;
    cout<<g<<endl;
    cout<<h<<endl;
}
